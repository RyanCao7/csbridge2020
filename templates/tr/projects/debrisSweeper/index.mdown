template: templates/tr/projects/projectTemplate.ptl
title: Enkazı Kaldır (çözümlü)
credit: Chris Piech ve gizemli CS106A ekibi tarafından yazıldı.
translation: Serhat Arslan, Demet Tümkaya
solution: soln.py

The goal of this example is to write a program that fills the screen with a random collection of debris (ovals) and then allows the user to click and remove debris pieces. This program lets you practice many techniques that we have learned in class. You will be using functions, `for` loops, graphics, random numbers, the mouse, and maybe even more!

İlk adım, enkazı oluşturmak. Enkaz parçalarının ne kadar büyük olabileceğine ve ekranda kaç parça bulunabileceğine dair limitleri sabitlerle oluşturun. Her parça için, rastgele (random) bir boyuta, konuma ve renge sahip (oluşturduğunuz lmitler içerisinde) yeni bir oval oluşturun. Bunun her boyutta ekran için çalışması gerektiğini unutmayın. Kodunuzu daha kolay okunabilir yapmak için bunu birkaç fonksiyona bölmek isteyebilirsiniz!

<center>
<img style="width:500px" src="{{pathToRoot}}img/projects/debrisSweeper/demo.png">   
</center>

Sonrasında, kullanıcıların enkazı ekrandan kaldırmalarını sağlamalıyız. Sonsuz bir döngü ekle ve kullanıcı bir objenin üstüne tıklayıp tıklamadığını kontrol edin. Eğer tıkladılarsa, o enkazı temizleyin (ekrandan kaldırın)!

## Tıklanan objeyi almak

The canvas function `canvas.find_element_at(x, y)` will get the object at the provided `(x, y)` argument.  If there is no object, it will return `None`. To perform some actions on an object (if it exists), you could write something like below:

```
object = canvas.find_element_at(x, y)    # x and y are some coordinates
if object:    # If there was an object there...
    print("Object found at (" + str(x) + ", " + str(y) + ")")
else:
    print("Object not found")
```

## Bonus!
Eğer isterseniz bonus olarak, tüm ekranın enkazdan temizlenmiş olduğu kontrol edecek bir yol ekleyebilirsiniz. Eğer öyleyse, kullanıcıya tebrikler de ve ekranı temizledikleri için teşekkür edin!
